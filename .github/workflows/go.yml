name: Go CI

on:
  push:
    tags:
      - 'v*' # This will trigger the workflow on pushing tags that start with 'v'

jobs:

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.17

    - name: Check out code
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      env:
        GOARCH: ${{ matrix.goarch }}
      run: go build -v -o ${{ github.event.repository.name }}-${{ matrix.goarch }} .

    - name: Test
      run: go test -v .

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ matrix.goarch }}
        path: ${{ github.event.repository.name }}-${{ matrix.goarch }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}-amd64/${{ github.event.repository.name }}-amd64
          asset_name: ${{ github.event.repository.name }}-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}-arm64/${{ github.event.repository.name }}-arm64
          asset_name: ${{ github.event.repository.name }}-arm64
          asset_content_type: application/octet-stream
